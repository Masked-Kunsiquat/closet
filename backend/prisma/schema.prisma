// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Or "sqlite" if using SQLite
  url      = env("DATABASE_URL")
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  clothingItems ClothingItem[]
}

model Brand {
  id   String @id @default(uuid())
  name String @unique

  clothingItems ClothingItem[]
}

model ClothingItem {
  id           String   @id @default(uuid())
  categoryId   String?
  brandId      String?
  name         String
  size         String?
  purchaseDate DateTime?
  price        Float?
  imageUrl     String?
  createdAt    DateTime @default(now())

  category  Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  brand     Brand?    @relation(fields: [brandId], references: [id], onDelete: SetNull)
  outfitItems OutfitItem[]
}

model Occasion {
  id   String @id @default(uuid())
  name String @unique

  outfits Outfit[]
}

model Outfit {
  id         String   @id @default(uuid())
  name       String
  occasionId String?
  createdAt  DateTime @default(now())

  occasion   Occasion? @relation(fields: [occasionId], references: [id], onDelete: SetNull)
  outfitItems OutfitItem[]
  wearLogs WearLog[]
}

model OutfitItem {
  id            String   @id @default(uuid())
  outfitId      String
  clothingItemId String

  outfit       Outfit       @relation(fields: [outfitId], references: [id], onDelete: Cascade)
  clothingItem ClothingItem @relation(fields: [clothingItemId], references: [id], onDelete: Cascade)
}

model WearLog {
  id        String   @id @default(uuid())
  outfitId  String
  wornDate  DateTime
  createdAt DateTime @default(now())

  outfit Outfit @relation(fields: [outfitId], references: [id], onDelete: Cascade)
}
